"use client";
import { Folder, FolderTree, FileCode  } from 'lucide-react';
import { useState } from 'react';
import '../../styles/backend.css'

const files = {
  Python: {
    "Crud com manipula√ß√£o b√°sica de arquivos": {
      desc: "No projeto AutoCar usei as tecnologias descritas a baixo para criar rotas para inserir, apagar, modificar, ler dados de carros fict√≠cios a venda e, no servidor, criar diret√≥rios baseados no id respons√°veis por fazer tratamentos de erros b√°sicos, salvar, atualizar e apagar imagens relacionadas aos carros de forma autom√°tica",
      stack: ['Python', 'Flask', 'Flask-SQLAlchemy', 'MySQL', 'Requisi√ß√µes HTTP','pathlib'],
    },
    "Habilidades em Login": {
      desc: "Sistema de login com op√ß√µes de 'logar com facebook, google' criar conta pr√≥pria, recuperar conta com c√≥digo em email, trocar email (em caso de perca de conta), senha salva com criptografia",
      stack: ['Flask', 'WTForms', 'JTW tokens', 'Facebook e google API', 'Hash de seguran√ßa'],
    },
    "Bot de Telegram simulando restaurante": {
      desc: "Bot que envia alertas personalizados para o Telegram com base em eventos ou dados de uma API.",
      stack: ['Python', 'python-telegram-bot', 'APIs p√∫blicas', 'JSON', 'Webhook'],
    },
    "Sla alguma coisa que envolve web socket, se p√° um joguinho": {
      desc: "Uma API moderna com suporte a autentica√ß√£o JWT, rotas protegidas e testes automatizados.",
      stack: ['Python', 'Flask', 'JWT', 'PostgreSQL', 'pytest'],
    },
  },
  Javascript: {
    "API RESTful com Express": {
      desc: "Uma API robusta com Express.js, roteamento modular e middlewares personalizados.",
      stack: ['JavaScript', 'Node.js', 'Express', 'MongoDB', 'Postman'],
    },
    "Autentica√ß√£o com tokens JWT": {
      desc: "Sistema completo de login com autentica√ß√£o baseada em tokens JWT e prote√ß√£o de rotas.",
      stack: ['JavaScript', 'Node.js', 'Express', 'JWT', 'bcrypt', 'MongoDB'],
    },
    "Sistema de upload de arquivos": {
      desc: "App que permite upload de imagens e arquivos, com valida√ß√£o de tipo e armazenamento em disco ou nuvem.",
      stack: ['JavaScript', 'Express', 'Multer', 'Cloudinary', 'Node.js'],
    },
    "Notificador de eventos com WebSocket": {
      desc: "Servi√ßo que envia notifica√ß√µes em tempo real para clientes conectados via WebSocket.",
      stack: ['JavaScript', 'Node.js', 'Socket.IO', 'Express', 'HTML/CSS'],
    },
    "Bot do Discord para modera√ß√£o": {
      desc: "Bot de modera√ß√£o automatizada com comandos personalizados para servidores Discord.",
      stack: ['JavaScript', 'Discord.js', 'Node.js', 'dotenv'],
    },
    "Scraper com Puppeteer": {
      desc: "Automa√ß√£o de navega√ß√£o em sites para extra√ß√£o de dados estruturados de p√°ginas din√¢micas.",
      stack: ['JavaScript', 'Node.js', 'Puppeteer', 'Cheerio', 'fs'],
    },
    "Dashboard interativo com ECharts": {
      desc: "Painel web com gr√°ficos interativos de dados consumidos de uma API backend.",
      stack: ['JavaScript', 'Node.js', 'Express', 'ECharts', 'Axios', 'HTML/CSS'],
    },
  },
};
export default function Backend(){
    const [selectedLang, setSelectedLang] = useState(null);
    const [selectedProject, setSelectedProject] = useState(null);
  
    const languageProjects = files[selectedLang] || {};
    const projectNames = Object.keys(languageProjects);


  return (
    <div className="explorer-window">
      <div className="explorer-header">
        <span className="explorer-title">Explorer</span>
        <button className="close-btn" onClick={() => setVisible(false)} title="Fechar">
            √ó
        </button>
      </div>
      
      <div className="explorer-content">
        
        <div className="backendos-container">
          {/* Sidebar */}
          <div className="sidebar">
            <h2>Pastas</h2>
            <div className="nav-section">
                <button onClick={() => { setSelectedLang(null); setSelectedProject(null); }} className='foldinho'>
                    üìÅ Backend
                </button>

                <button onClick={() => { setSelectedLang("Python"); setSelectedProject(null); }}>
                    <FolderTree size={24} color='#333'/> Python
                </button>

                <button onClick={() => { setSelectedLang("Javascript"); setSelectedProject(null); }}>
                    <FolderTree size={24} color='#333'/> Javascript
                </button>
            </div>
          </div>

          {/* Explorer */}
          <div className="explorer">
            <h2 className="title">{selectedLang ? selectedLang : 'Backend'}</h2>
            <h3>{selectedLang ? 'Meus projetos e habilidades': 'Selecione a pasta desejada'}</h3>
            <div className="folder-grid">
                {!selectedLang ? (
                <>
                  <div className="folder" onClick={() => setSelectedLang('Javascript')}>
                    <Folder size={64} color="#666" />
                    <span>Javascript</span>
                  </div>
                  <div className="folder" onClick={() => setSelectedLang('Python')}>
                    <Folder size={64} color="#666" />
                    <span>Python</span>
                  </div>
                </>
              ) :(
                projectNames.map((projectName) => (
                  <div
                  key={projectName}
                  className="folder"
                  onClick={() => setSelectedProject({ name: projectName, ...languageProjects[projectName] })}
                  >
                      <FileCode  size={64} color="#4b5563" />
                      <div className='folder_text'>
                          <span>{projectName}</span>
                          <span className='stack'>[{languageProjects[projectName].stack + ''}]</span>
                      </div>
                    </div>
                  ))
                )}
            </div>

          </div>

          {/* Viewer */}
          <div className="viewer">
            {selectedProject ? (
              <>
                <h3>{selectedProject.name}</h3>
                <p style={{ margin: '12px 0', fontSize: '16px' }}>{selectedProject.desc}</p>
                <h4>Tecnologias usadas:</h4>
                <ul className="stack-list">
                  {selectedProject.stack.map((tech, index) => (
                    <li key={index} className="stack-item">{tech}</li>
                  ))}
                </ul>
              </>
            ) : (
              <p className="placeholder">Selecione um projeto para visualizar detalhes</p>
            )}
        </div>
      
        </div>

      </div>
    
    </div>
  )
}